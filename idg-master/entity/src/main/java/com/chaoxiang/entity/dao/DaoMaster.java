package com.chaoxiang.entity.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.chaoxiang.entity.dao.IMUserDao;
import com.chaoxiang.entity.dao.IMGroupDao;
import com.chaoxiang.entity.dao.IMGroupChatDao;
import com.chaoxiang.entity.dao.IMMessageDao;
import com.chaoxiang.entity.dao.IMConversationDao;
import com.chaoxiang.entity.dao.IMAudioFailDao;
import com.chaoxiang.entity.dao.IMVoiceGroupDao;
import com.chaoxiang.entity.dao.IMCallLogDao;
import com.chaoxiang.entity.dao.IMAddFriendDao;
import com.chaoxiang.entity.dao.IMKeFuDao;
import com.chaoxiang.entity.dao.IMWorkCircleDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * Master of DAO (schema version 1): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster
{
    public static final int SCHEMA_VERSION = 1;

    /**
     * Creates underlying database table using DAOs.
     */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists)
    {
        IMUserDao.createTable(db, ifNotExists);
        IMGroupDao.createTable(db, ifNotExists);
        IMGroupChatDao.createTable(db, ifNotExists);
        IMMessageDao.createTable(db, ifNotExists);
        IMConversationDao.createTable(db, ifNotExists);
        IMAudioFailDao.createTable(db, ifNotExists);
        IMVoiceGroupDao.createTable(db, ifNotExists);
        IMCallLogDao.createTable(db, ifNotExists);
        IMAddFriendDao.createTable(db, ifNotExists);
        IMKeFuDao.createTable(db, ifNotExists);
        IMWorkCircleDao.createTable(db, ifNotExists);
    }

    /**
     * Drops underlying database table using DAOs.
     */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists)
    {
        IMUserDao.dropTable(db, ifExists);
        IMGroupDao.dropTable(db, ifExists);
        IMGroupChatDao.dropTable(db, ifExists);
        IMMessageDao.dropTable(db, ifExists);
        IMConversationDao.dropTable(db, ifExists);
        IMAudioFailDao.dropTable(db, ifExists);
        IMVoiceGroupDao.dropTable(db, ifExists);
        IMCallLogDao.dropTable(db, ifExists);
        IMAddFriendDao.dropTable(db, ifExists);
        IMKeFuDao.dropTable(db, ifExists);
        IMWorkCircleDao.dropTable(db, ifExists);
    }

    public static abstract class OpenHelper extends SQLiteOpenHelper
    {

        public OpenHelper(Context context, String name, CursorFactory factory)
        {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db)
        {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     */
    public static class DevOpenHelper extends OpenHelper
    {
        public DevOpenHelper(Context context, String name, CursorFactory factory)
        {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)
        {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db)
    {
        super(db, SCHEMA_VERSION);
        registerDaoClass(IMUserDao.class);
        registerDaoClass(IMGroupDao.class);
        registerDaoClass(IMGroupChatDao.class);
        registerDaoClass(IMMessageDao.class);
        registerDaoClass(IMConversationDao.class);
        registerDaoClass(IMAudioFailDao.class);
        registerDaoClass(IMVoiceGroupDao.class);
        registerDaoClass(IMCallLogDao.class);
        registerDaoClass(IMAddFriendDao.class);
        registerDaoClass(IMKeFuDao.class);
        registerDaoClass(IMWorkCircleDao.class);
    }

    public DaoSession newSession()
    {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type)
    {
        return new DaoSession(db, type, daoConfigMap);
    }

}
