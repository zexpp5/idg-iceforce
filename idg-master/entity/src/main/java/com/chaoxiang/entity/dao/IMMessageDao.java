package com.chaoxiang.entity.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.QueryBuilder;

import com.chaoxiang.base.utils.SDLogUtil;
import com.chaoxiang.entity.IMDaoManager;
import com.chaoxiang.entity.chat.IMAudioFail;
import com.chaoxiang.entity.chat.IMMessage;

import java.util.ArrayList;
import java.util.List;

import static android.R.attr.id;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "DDX_IM_MESSAGE".
 */
public class IMMessageDao extends AbstractDao<IMMessage, Long>
{

    public static final String TABLENAME = "DDX_IM_MESSAGE";

    /**
     * Properties of entity IMMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties
    {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property MessageId = new Property(1, String.class, "messageId", false, "MESSAGE_ID");
        public final static Property Type = new Property(2, Integer.class, "type", false, "TYPE");
        public final static Property Priority = new Property(3, Byte.class, "priority", false, "PRIORITY");
        public final static Property _from = new Property(4, String.class, "_from", false, "_FROM");
        public final static Property _to = new Property(5, String.class, "_to", false, "_TO");
        public final static Property GroupId = new Property(6, String.class, "groupId", false, "GROUP_ID");
        public final static Property IsReaded = new Property(7, Boolean.class, "isReaded", false, "IS_READED");
        public final static Property Message = new Property(8, String.class, "message", false, "MESSAGE");
        public final static Property CreateTime = new Property(9, String.class, "createTime", false, "CREATE_TIME");
        public final static Property CreateTimeMillisecond = new Property(10, Long.class, "createTimeMillisecond", false, "CREATE_TIME_MILLISECOND");
        public final static Property ReadTime = new Property(11, String.class, "readTime", false, "READ_TIME");
        public final static Property ReadTimeMillisecond = new Property(12, Long.class, "readTimeMillisecond", false, "READ_TIME_MILLISECOND");
        public final static Property OnlineStatus = new Property(13, Integer.class, "onlineStatus", false, "ONLINE_STATUS");
        public final static Property MsgChatType = new Property(14, Integer.class, "msgChatType", false, "MSG_CHAT_TYPE");
        public final static Property MsgStatus = new Property(15, Integer.class, "msgStatus", false, "MSG_STATUS");
        public final static Property Direct = new Property(16, Integer.class, "direct", false, "DIRECT");
        public final static Property Attachment = new Property(17, String.class, "attachment", false, "ATTACHMENT");
        public final static Property HotTime = new Property(18, Integer.class, "hotTime", false, "HOT_TIME");
        public final static Property IsHotChatVisible = new Property(19, Boolean.class, "isHotChatVisible", false, "IS_HOT_CHAT_VISIBLE");
        public final static Property IsHotChat = new Property(20, Boolean.class, "isHotChat", false, "IS_HOT_CHAT");
        public final static Property IsReadStatus = new Property(21, Boolean.class, "isReadStatus", false, "IS_READ_STATUS");
    }

    ;


    public IMMessageDao(DaoConfig config)
    {
        super(config);
    }

    public IMMessageDao(DaoConfig config, DaoSession daoSession)
    {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists)
    {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"DDX_IM_MESSAGE\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MESSAGE_ID\" TEXT UNIQUE ," + // 1: messageId
                "\"TYPE\" INTEGER," + // 2: type
                "\"PRIORITY\" INTEGER," + // 3: priority
                "\"_FROM\" TEXT," + // 4: _from
                "\"_TO\" TEXT," + // 5: _to
                "\"GROUP_ID\" TEXT," + // 6: groupId
                "\"IS_READED\" INTEGER," + // 7: isReaded
                "\"MESSAGE\" TEXT," + // 8: message
                "\"CREATE_TIME\" TEXT," + // 9: createTime
                "\"CREATE_TIME_MILLISECOND\" INTEGER," + // 10: createTimeMillisecond
                "\"READ_TIME\" TEXT," + // 11: readTime
                "\"READ_TIME_MILLISECOND\" INTEGER," + // 12: readTimeMillisecond
                "\"ONLINE_STATUS\" INTEGER," + // 13: onlineStatus
                "\"MSG_CHAT_TYPE\" INTEGER," + // 14: msgChatType
                "\"MSG_STATUS\" INTEGER," + // 15: msgStatus
                "\"DIRECT\" INTEGER," + // 16: direct
                "\"ATTACHMENT\" TEXT," + // 17: attachment
                "\"HOT_TIME\" INTEGER," + // 18: hotTime
                "\"IS_HOT_CHAT_VISIBLE\" INTEGER," + // 19: isHotChatVisible
                "\"IS_HOT_CHAT\" INTEGER," + // 20: isHotChat
                "\"IS_READ_STATUS\" INTEGER);"); // 21: isReadStatus
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists)
    {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DDX_IM_MESSAGE\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, IMMessage entity)
    {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null)
        {
            stmt.bindLong(1, id);
        }

        String messageId = entity.getMessageId();
        if (messageId != null)
        {
            stmt.bindString(2, messageId);
        }

        Integer type = entity.getType();
        if (type != null)
        {
            stmt.bindLong(3, type);
        }

        Byte priority = entity.getPriority();
        if (priority != null)
        {
            stmt.bindLong(4, priority);
        }

        String _from = entity.get_from();
        if (_from != null)
        {
            stmt.bindString(5, _from);
        }

        String _to = entity.get_to();
        if (_to != null)
        {
            stmt.bindString(6, _to);
        }

        String groupId = entity.getGroupId();
        if (groupId != null)
        {
            stmt.bindString(7, groupId);
        }

        Boolean isReaded = entity.getIsReaded();
        if (isReaded != null)
        {
            stmt.bindLong(8, isReaded ? 1L : 0L);
        }

        String message = entity.getMessage();
        if (message != null)
        {
            stmt.bindString(9, message);
        }

        String createTime = entity.getCreateTime();
        if (createTime != null)
        {
            stmt.bindString(10, createTime);
        }

        Long createTimeMillisecond = entity.getCreateTimeMillisecond();
        if (createTimeMillisecond != null)
        {
            stmt.bindLong(11, createTimeMillisecond);
        }

        String readTime = entity.getReadTime();
        if (readTime != null)
        {
            stmt.bindString(12, readTime);
        }

        Long readTimeMillisecond = entity.getReadTimeMillisecond();
        if (readTimeMillisecond != null)
        {
            stmt.bindLong(13, readTimeMillisecond);
        }

        Integer onlineStatus = entity.getOnlineStatus();
        if (onlineStatus != null)
        {
            stmt.bindLong(14, onlineStatus);
        }

        Integer msgChatType = entity.getMsgChatType();
        if (msgChatType != null)
        {
            stmt.bindLong(15, msgChatType);
        }

        Integer msgStatus = entity.getMsgStatus();
        if (msgStatus != null)
        {
            stmt.bindLong(16, msgStatus);
        }

        Integer direct = entity.getDirect();
        if (direct != null)
        {
            stmt.bindLong(17, direct);
        }

        String attachment = entity.getAttachment();
        if (attachment != null)
        {
            stmt.bindString(18, attachment);
        }

        Integer hotTime = entity.getHotTime();
        if (hotTime != null)
        {
            stmt.bindLong(19, hotTime);
        }

        Boolean isHotChatVisible = entity.getIsHotChatVisible();
        if (isHotChatVisible != null)
        {
            stmt.bindLong(20, isHotChatVisible ? 1L : 0L);
        }

        Boolean isHotChat = entity.getIsHotChat();
        if (isHotChat != null)
        {
            stmt.bindLong(21, isHotChat ? 1L : 0L);
        }

        Boolean isReadStatus = entity.getIsReadStatus();
        if (isReadStatus != null)
        {
            stmt.bindLong(22, isReadStatus ? 1L : 0L);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset)
    {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public IMMessage readEntity(Cursor cursor, int offset)
    {
        IMMessage entity = new IMMessage( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // messageId
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // type
                cursor.isNull(offset + 3) ? null : (byte) cursor.getShort(offset + 3), // priority
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // _from
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // _to
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // groupId
                cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // isReaded
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // message
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // createTime
                cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // createTimeMillisecond
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // readTime
                cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // readTimeMillisecond
                cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // onlineStatus
                cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // msgChatType
                cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // msgStatus
                cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // direct
                cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // attachment
                cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // hotTime
                cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0, // isHotChatVisible
                cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0, // isHotChat
                cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0 // isReadStatus
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, IMMessage entity, int offset)
    {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessageId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setPriority(cursor.isNull(offset + 3) ? null : (byte) cursor.getShort(offset + 3));
        entity.set_from(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.set_to(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGroupId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsReaded(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setMessage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreateTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreateTimeMillisecond(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setReadTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setReadTimeMillisecond(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setOnlineStatus(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setMsgChatType(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setMsgStatus(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setDirect(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setAttachment(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setHotTime(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setIsHotChatVisible(cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0);
        entity.setIsHotChat(cursor.isNull(offset + 20) ? null : cursor.getShort(offset + 20) != 0);
        entity.setIsReadStatus(cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(IMMessage entity, long rowId)
    {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(IMMessage entity)
    {
        if (entity != null)
        {
            return entity.getId();
        } else
        {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable()
    {
        return true;
    }

    // KEEP METHODS - put your custom methods here
    public IMMessage findMessageByMessageId(String messageId)
    {
        IMMessage imMessage = queryBuilder()
                .where(IMMessageDao.Properties.MessageId.eq(messageId))
                .unique();
        return imMessage;
    }

    /**
     * 查询from到to的会话信息
     *
     * @param from
     * @param to
     * @param limit
     * @return
     */
    public List<IMMessage> loadConversationMsg(String from, String to, int limit)
    {
        QueryBuilder qb = queryBuilder();
        qb.whereOr(qb.and(Properties._from.eq(from), Properties._to.eq(to)), qb.and(Properties._from.eq(to), Properties._to.eq(from)));
        qb.where(Properties.Type.eq(3));
        return qb.limit(limit).orderDesc(Properties.Id).build().list();
    }


    /**
     * 查询from到to的会话信息 (未读的) 排除语音等
     *
     * @param from
     * @param to
     * @return
     */
    public List<IMMessage> loadMessageUnReadMsg(String from, String to)
    {
        QueryBuilder qb = queryBuilder();
        qb.where(Properties._from.eq(to), Properties._to.eq(from), Properties.Type.eq(3), Properties.IsReadStatus.eq(false), Properties.MsgChatType.notIn(2, 3, 4, 10));
        return qb.orderDesc(Properties.Id).build().list();
    }

    /**
     * 查询from到to的会话信息 包含ID
     *
     * @param from
     * @param to
     * @param id
     * @param limit
     * @return
     */
    public List<IMMessage> loadMoreConversationMsg(String from, String to, long id, int limit)
    {
        QueryBuilder qb = queryBuilder();
        qb.whereOr(qb.and(Properties._from.eq(from), Properties._to.eq(to), Properties.Id.lt(id)),
                qb.and(Properties._from.eq(to), Properties._to.eq(from), Properties.Id.lt(id)));
        return qb.limit(limit).orderAsc(Properties.Id).build().list();
    }

    /**
     * 查询from到to的会话信息的总数
     *
     * @param from
     * @param to
     * @param id
     * @return
     */
    public long loadSingleChatMsgCount(String from, String to, long id)
    {
        QueryBuilder qb = queryBuilder();
        qb.whereOr(qb.and(Properties._from.eq(from), Properties._to.eq(to)),
                qb.and(Properties._from.eq(to), Properties._to.eq(from)));
        qb.orderAsc(Properties.Id).build();
        return qb.count();
    }

    /**
     * 查询from到to的会话信息的总数
     *
     * @return
     */
    public long loadGroupChatMsgCount(String groupId)
    {
        QueryBuilder qb = queryBuilder();
        qb.where(Properties.GroupId.eq(groupId))
                .orderDesc(Properties.Id).build();
        return qb.count();
    }

    /**
     * 查询from到to的会话信息 包含ID
     * 用于查询更多数据的时候的。分页
     * page第几页
     *
     * @param from
     * @param to
     * @param id
     * @param limit
     * @return
     */
    public List<IMMessage> loadSingleChatPageMsg(String from, String to, long id, int limit, int page)
    {
        QueryBuilder qb = queryBuilder();
        qb.whereOr(qb.and(Properties._from.eq(from), Properties._to.eq(to), Properties.Id.lt(id)),
                qb.and(Properties._from.eq(to), Properties._to.eq(from), Properties.Id.lt(id)));
//        return qb.limit(limit).orderAsc(Properties.CreateTimeMillisecond).build().list();
        return qb.offset(page * limit).limit(limit).orderDesc(Properties.Id).build().list();
    }

    public List<IMMessage> loadSingleChatPageMsg2(String from, String to, int limit, int page)
    {
        QueryBuilder qb = queryBuilder();
        qb.whereOr(qb.and(Properties._from.eq(from), Properties._to.eq(to), Properties.Type.eq(3)),
                qb.and(Properties._from.eq(to), Properties._to.eq(from), Properties.Type.eq(3)));
//        return qb.limit(limit).orderAsc(Properties.CreateTimeMillisecond).build().list();
        return qb.offset(page * limit).limit(limit).orderDesc(Properties.Id).build().list();
    }

    /**
     * 查询群组更多会话消息
     *
     * @param groupId
     * @param limit
     * @return
     */
    public List<IMMessage> loadGroupConversationMsg(String groupId, int limit)
    {
        return queryBuilder().where(Properties.GroupId.eq(groupId))
                .limit(limit)
                .orderDesc(Properties.Id).build().list();
    }

    public List<IMMessage> loadGroupChatPageMsg(String groupId, int limit, int page)
    {
        QueryBuilder qb = queryBuilder();
        qb.where(Properties.GroupId.eq(groupId));
        return qb.offset(page * limit).limit(limit).orderDesc(Properties.Id).build().list();
    }

    public List<IMMessage> loadGroupChatPageMsg2(String groupId, int limit, int page)
    {
        QueryBuilder qb = queryBuilder();
        qb.where(Properties.GroupId.eq(groupId));
        return qb.offset(page * limit).limit(limit).orderDesc(Properties.Id).build().list();
    }

    /**
     * 查询对应群ID会话消息
     *
     * @param groupId
     * @return
     */
    public List<IMMessage> loadIMMessageListFromGroupId(String groupId)
    {
        return queryBuilder().where(Properties.GroupId.eq(groupId))
                .orderDesc(Properties.Id).build().list();
    }

    public List<IMMessage> loadMoreConversationMsg(String groupId, long id, int limit)
    {
        return queryBuilder().where(Properties.GroupId.eq(groupId), Properties.Id.lt(id))
                .limit(limit)
                .orderAsc(Properties.Id).build().list();
    }

    /**
     * 通过messageId更新状态
     *
     * @param imMessage
     */
    public void updateMsgByMsgId(IMMessage imMessage)
    {
//        String sql = SqlUtils.createSqlUpdate(TABLENAME,new String[]{Properties.MsgStatus.columnName},new String[]{Properties.MessageId.columnName});
//        SQLiteStatement statement = db.compileStatement(sql);
//        statement.bindLong(1,imMessage.getMsgStatus());
//        statement.bindLong(2,imMessage.getMessageId());
//        statement.execute();
        try
        {
            IMMessage daoMsg = queryBuilder().where(Properties.MessageId.eq(imMessage.getMessageId())).unique();
            if (daoMsg != null)
            {
                imMessage.setId(daoMsg.getId());
                update(imMessage);
            }
        } catch (Exception e)
        {
            e.printStackTrace();
        }

    }

    /**
     * 获取单条Msg
     *
     * @param messageId
     * @return
     */
    public IMMessage loadMsgByMessageId(String messageId)
    {
        IMMessage message = null;
        try
        {
            message = queryBuilder().where(Properties.MessageId.eq(messageId)).unique();
        } catch (Exception e)
        {
            e.printStackTrace();
        }
        return message;
    }

    /**
     * 删除单聊会话所有消息
     *
     * @param from
     * @param to
     */
    public void removeSingleChatConversationMsg(String from, String to)
    {
        String sql = "DELETE FROM " + TABLENAME + " WHERE " + Properties._from.columnName + "='" + from + "' AND " + Properties._to.columnName + "='" + to + "' OR "
                + Properties._from.columnName + "='" + to + "' AND " + Properties._to.columnName + "='" + from + "'";
        try
        {
            db.execSQL(sql);
        } catch (Exception e)
        {
            e.printStackTrace();
        }
    }


    /**
     * 删除单条记录
     *
     * @param msgId
     */
    public void deleteMsgByMsgIdNoSql(String msgId)
    {
        String[] args = {msgId};
        db.delete(TABLENAME, Properties.MessageId.columnName + " = ?", args);
    }

    /**
     * 删除单条记录
     *
     * @param msgId
     */
    public void deleteMsgByMsgId(String msgId)
    {
        String sql = "DELETE FROM " + TABLENAME + " WHERE " + Properties.MessageId.columnName + "=" + msgId;
        try
        {
            db.execSQL(sql);
//            String[] args = {msgId};
//            db.delete(TABLENAME, "messageId=?", args);

        } catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    /**
     * 删除群聊会话所有消息
     * @param groupId
     */
    public void removeGroupConversationMsg(String groupId)
    {
        String sql = "DELETE FROM " + TABLENAME + " WHERE " + Properties.GroupId.columnName + "='" + groupId + "'";
        SDLogUtil.debug("sql==>" + sql);
        try
        {
            db.execSQL(sql);
        } catch (Exception e)
        {
            e.printStackTrace();
        }
    }

//    /**
//     * 更新消息已读,未读状态
//     */
//    public void updateMsgReadStatus(long messageId, int readStatus) {
//        String sql = "UPDATE " + TABLENAME + " SET " + Properties.IsReaded.columnName + "='" + readStatus + "' WHERE "
//                + Properties.MessageId.columnName + "='" + messageId + "'";
//        SDLogUtil.debug("sql==>" + sql);
//        try {
//            db.execSQL(sql);
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//    }

    public List<IMMessage> findAllAudioFailMsg(List<IMAudioFail> audioFails)
    {
        List<IMMessage> imMessages = null;
        if (audioFails == null)
        {
            return imMessages;
        }
        try
        {
            List<String> msgIds = new ArrayList<>();
            for (IMAudioFail audioFail : audioFails)
            {
                msgIds.add(audioFail.getMessageId());
            }
            imMessages = queryBuilder().where(Properties.MessageId.in(msgIds)).orderAsc(Properties.CreateTimeMillisecond).build().list();
        } catch (Exception e)
        {
            e.printStackTrace();
        }
        return imMessages;
    }

    public List<IMMessage> findUnReadMessageList(List<String> msgIds)
    {
        List<IMMessage> list = null;
        if (msgIds == null)
        {
            return list;
        }
        try
        {
            list = queryBuilder()
                    .where(Properties.MessageId.in(msgIds)).build()
                    .list();
//            IMDaoManager.getInstance().getDaoSession().getIMMessageDao().queryBuilder()
        } catch (Exception e)
        {
            e.printStackTrace();
        }
        return list;
    }

//    /**
//     * 模糊搜素对应信息的
//     * @param messageString
//     * @return
//     */
//    public List<IMMessage> loadSearchMessageList(String messageString)
//    {
//        return queryBuilder().where(Properties.Message.eq(messageString))
//                .orderDesc(Properties.Id).build().list();
//    }

    /**
     * 模糊搜素对应信息的
     * -单聊
     *
     * @param messageString
     * @return
     */
    public List<IMMessage> loadSearchSingleMessageList(String messageString)
    {
        QueryBuilder qb = queryBuilder();
        qb.where(qb.and(Properties.Message.like("%" + messageString + "%"), Properties.Type.eq(3)));
        return qb.build().list();
    }

    /**
     * 模糊搜素对应信息的
     * -群聊
     *
     * @param messageString
     * @return
     */
    public List<IMMessage> loadSearchGroupMessageList(String messageString)
    {
        QueryBuilder qb = queryBuilder();
        qb.where(qb.and(Properties.Message.like("%" + messageString + "%"), Properties.Type.eq(4), Properties.MsgChatType.notEq(10)));
//        qb.where(Properties.Type.eq(3));
//        return qb.limit(limit).orderDesc(Properties.Id).build().list();
        return qb.build().list();
    }
    // KEEP METHODS END

}
