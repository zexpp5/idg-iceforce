package com.chaoxiang.entity.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.chaoxiang.entity.chat.IMCallLog;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "DDX_IM_CALL_LOG".
*/
public class IMCallLogDao extends AbstractDao<IMCallLog, Long> {

    public static final String TABLENAME = "DDX_IM_CALL_LOG";

    /**
     * Properties of entity IMCallLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property LogId = new Property(1, String.class, "logId", false, "LOG_ID");
        public final static Property AnswerType = new Property(2, Integer.class, "answerType", false, "ANSWER_TYPE");
        public final static Property FromImAccound = new Property(3, String.class, "fromImAccound", false, "FROM_IM_ACCOUND");
        public final static Property ToImAccound = new Property(4, String.class, "toImAccound", false, "TO_IM_ACCOUND");
        public final static Property HeadUrl = new Property(5, String.class, "headUrl", false, "HEAD_URL");
        public final static Property WithName = new Property(6, String.class, "withName", false, "WITH_NAME");
        public final static Property AnswerState = new Property(7, Integer.class, "answerState", false, "ANSWER_STATE");
        public final static Property CallMode = new Property(8, Integer.class, "callMode", false, "CALL_MODE");
        public final static Property CreateTime = new Property(9, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property Attachment = new Property(10, String.class, "attachment", false, "ATTACHMENT");
    };


    public IMCallLogDao(DaoConfig config) {
        super(config);
    }

    public IMCallLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DDX_IM_CALL_LOG\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LOG_ID\" TEXT UNIQUE ," + // 1: logId
                "\"ANSWER_TYPE\" INTEGER," + // 2: answerType
                "\"FROM_IM_ACCOUND\" TEXT," + // 3: fromImAccound
                "\"TO_IM_ACCOUND\" TEXT," + // 4: toImAccound
                "\"HEAD_URL\" TEXT," + // 5: headUrl
                "\"WITH_NAME\" TEXT," + // 6: withName
                "\"ANSWER_STATE\" INTEGER," + // 7: answerState
                "\"CALL_MODE\" INTEGER," + // 8: callMode
                "\"CREATE_TIME\" INTEGER," + // 9: createTime
                "\"ATTACHMENT\" TEXT);"); // 10: attachment
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DDX_IM_CALL_LOG\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, IMCallLog entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String logId = entity.getLogId();
        if (logId != null) {
            stmt.bindString(2, logId);
        }

        Integer answerType = entity.getAnswerType();
        if (answerType != null) {
            stmt.bindLong(3, answerType);
        }

        String fromImAccound = entity.getFromImAccound();
        if (fromImAccound != null) {
            stmt.bindString(4, fromImAccound);
        }

        String toImAccound = entity.getToImAccound();
        if (toImAccound != null) {
            stmt.bindString(5, toImAccound);
        }

        String headUrl = entity.getHeadUrl();
        if (headUrl != null) {
            stmt.bindString(6, headUrl);
        }

        String withName = entity.getWithName();
        if (withName != null) {
            stmt.bindString(7, withName);
        }

        Integer answerState = entity.getAnswerState();
        if (answerState != null) {
            stmt.bindLong(8, answerState);
        }

        Integer callMode = entity.getCallMode();
        if (callMode != null) {
            stmt.bindLong(9, callMode);
        }

        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(10, createTime);
        }

        String attachment = entity.getAttachment();
        if (attachment != null) {
            stmt.bindString(11, attachment);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public IMCallLog readEntity(Cursor cursor, int offset) {
        IMCallLog entity = new IMCallLog( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // logId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // answerType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fromImAccound
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // toImAccound
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // headUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // withName
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // answerState
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // callMode
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // createTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // attachment
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, IMCallLog entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLogId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAnswerType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setFromImAccound(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setToImAccound(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHeadUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWithName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAnswerState(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setCallMode(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setCreateTime(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setAttachment(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(IMCallLog entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(IMCallLog entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    // KEEP METHODS - put your custom methods here
    /**
     * 按时间排
     * @return
     */
    public List<IMCallLog> loadAllByTimeDesc()
    {
        try
        {
            return queryBuilder().orderDesc(Properties.CreateTime).build().list();

        } catch (Exception e)
        {
            return null;
        }
    }

    // KEEP METHODS END
}
