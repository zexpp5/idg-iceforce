package com.chaoxiang.entity.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.chaoxiang.entity.chat.IMKeFu;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DDX_IM_KEFU".
*/
public class IMKeFuDao extends AbstractDao<IMKeFu, Long> {

    public static final String TABLENAME = "DDX_IM_KEFU";

    /**
     * Properties of entity IMKeFu.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Icon = new Property(1, String.class, "icon", false, "ICON");
        public final static Property RealName = new Property(2, String.class, "realName", false, "REAL_NAME");
        public final static Property Sex = new Property(3, String.class, "sex", false, "SEX");
        public final static Property DpName = new Property(4, String.class, "dpName", false, "DP_NAME");
        public final static Property Job = new Property(5, String.class, "job", false, "JOB");
        public final static Property UserType = new Property(6, String.class, "userType", false, "USER_TYPE");
        public final static Property Email = new Property(7, String.class, "email", false, "EMAIL");
        public final static Property Telephone = new Property(8, String.class, "telephone", false, "TELEPHONE");
        public final static Property UserId = new Property(9, String.class, "userId", false, "USER_ID");
        public final static Property ImAccount = new Property(10, String.class, "imAccount", false, "IM_ACCOUNT");
        public final static Property Account = new Property(11, String.class, "account", false, "ACCOUNT");
        public final static Property Attachment = new Property(12, String.class, "attachment", false, "ATTACHMENT");
    };


    public IMKeFuDao(DaoConfig config) {
        super(config);
    }
    
    public IMKeFuDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DDX_IM_KEFU\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ICON\" TEXT," + // 1: icon
                "\"REAL_NAME\" TEXT," + // 2: realName
                "\"SEX\" TEXT," + // 3: sex
                "\"DP_NAME\" TEXT," + // 4: dpName
                "\"JOB\" TEXT," + // 5: job
                "\"USER_TYPE\" TEXT," + // 6: userType
                "\"EMAIL\" TEXT," + // 7: email
                "\"TELEPHONE\" TEXT," + // 8: telephone
                "\"USER_ID\" TEXT," + // 9: userId
                "\"IM_ACCOUNT\" TEXT," + // 10: imAccount
                "\"ACCOUNT\" TEXT," + // 11: account
                "\"ATTACHMENT\" TEXT);"); // 12: attachment
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DDX_IM_KEFU\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, IMKeFu entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(2, icon);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(3, realName);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        String dpName = entity.getDpName();
        if (dpName != null) {
            stmt.bindString(5, dpName);
        }
 
        String job = entity.getJob();
        if (job != null) {
            stmt.bindString(6, job);
        }
 
        String userType = entity.getUserType();
        if (userType != null) {
            stmt.bindString(7, userType);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(9, telephone);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(10, userId);
        }
 
        String imAccount = entity.getImAccount();
        if (imAccount != null) {
            stmt.bindString(11, imAccount);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(12, account);
        }
 
        String attachment = entity.getAttachment();
        if (attachment != null) {
            stmt.bindString(13, attachment);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public IMKeFu readEntity(Cursor cursor, int offset) {
        IMKeFu entity = new IMKeFu( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // icon
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // realName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dpName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // job
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // email
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // telephone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // userId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // imAccount
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // account
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // attachment
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, IMKeFu entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIcon(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRealName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDpName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setJob(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEmail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTelephone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUserId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setImAccount(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAccount(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAttachment(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(IMKeFu entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(IMKeFu entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    // KEEP METHODS - put your custom methods here
    public synchronized IMKeFu findUserByImAccount(String imAccount)
    {
        IMKeFu userEntities = queryBuilder().where(Properties.ImAccount.eq(imAccount)).unique();
        if (userEntities == null)
        {
            return null;
        }
        return userEntities;
    }

    // KEEP METHODS END
}
