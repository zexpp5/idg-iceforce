package com.chaoxiang.entity.conversation;

import com.chaoxiang.base.utils.StringUtils;
import com.chaoxiang.entity.dao.DaoSession;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

import com.chaoxiang.entity.chat.IMMessage;
import com.chaoxiang.entity.dao.IMConversationDao;
import com.chaoxiang.entity.dao.IMMessageDao;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "DDX_IM_CONVERSATION".
 */
public class IMConversation {

    private Long id;
    private String username;
    private String messageId;
    private Integer type;
    private int unReadMsg;
    private java.util.Date createTime;
    private java.util.Date updateTime;
    private String title;
    private String attachment;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient IMConversationDao myDao;

    private IMMessage iMMessage;
    private String iMMessage__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public IMConversation() {
    }

    public IMConversation(Long id) {
        this.id = id;
    }

    public IMConversation(Long id, String username, String messageId, Integer type, int unReadMsg, java.util.Date createTime, java.util.Date updateTime, String title, String attachment) {
        this.id = id;
        this.username = username;
        this.messageId = messageId;
        this.type = type;
        this.unReadMsg = unReadMsg;
        this.createTime = createTime;
        this.updateTime = updateTime;
        this.title = title;
        this.attachment = attachment;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getIMConversationDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getMessageId() {
        return messageId;
    }

    public void setMessageId(String messageId) {
        this.messageId = messageId;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public int getUnReadMsg() {
        return unReadMsg;
    }

    public void setUnReadMsg(int unReadMsg) {
        this.unReadMsg = unReadMsg;
    }

    public java.util.Date getCreateTime() {
        return createTime;
    }

    public void setCreateTime(java.util.Date createTime) {
        this.createTime = createTime;
    }

    public java.util.Date getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(java.util.Date updateTime) {
        this.updateTime = updateTime;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getAttachment() {
        return attachment;
    }

    public void setAttachment(String attachment) {
        this.attachment = attachment;
    }

    /** To-one relationship, resolved on first access. */
//    public IMMessage getIMMessage()
    //    {
//        String __key = this.messageId;
//        if (StringUtils.empty(__key) && (StringUtils.empty(iMMessage__resolvedKey) || iMMessage__resolvedKey.equals(__key)))
//        {
//            if (daoSession == null)
//            {
//                throw new DaoException("Entity is detached from DAO context");
//            }
//
//            IMMessageDao targetDao = daoSession.getIMMessageDao();
////            IMMessage iMMessageNew = targetDao.load(new Long(__key).longValue());
//            IMMessage iMMessageNew = targetDao.load(Long.parseLong(__key));
//            synchronized (this)
//            {
//                iMMessage = iMMessageNew;
//                iMMessage__resolvedKey = __key;
//            }
//        }
//        return iMMessage;
//    }
    public IMMessage getIMMessage()
    {
        IMMessageDao targetDao = daoSession.getIMMessageDao();
        String __key = this.messageId;

//        if (StringUtils.empty(iMMessage__resolvedKey))
//        {
//            iMMessage__resolvedKey = __key;
//        }

        if (StringUtils.notEmpty(__key) && (StringUtils.empty(iMMessage__resolvedKey) || !iMMessage__resolvedKey.equals(__key)))
        {
            if (daoSession == null)
            {
                throw new DaoException("Entity is detached from DAO context");
            }
            List<IMMessage> items = targetDao.queryBuilder()
                    .where(IMMessageDao.Properties.MessageId.eq(__key))
                    .list();
            IMMessage iMMessageNew = items.get(0);
            synchronized (this)
            {
                iMMessage = iMMessageNew;
                iMMessage__resolvedKey = __key;
            }
        }
        return iMMessage;
    }

    /**
     * 获取对应Username的所有信息Message
     */
    public List<IMMessage> getIMMessageListFromUserName()
    {
        IMMessageDao targetDao = daoSession.getIMMessageDao();
        String __key = this.username;
        List<IMMessage> items = null;
        if (StringUtils.notEmpty(__key))
        {
            if (daoSession == null)
            {
                throw new DaoException("Entity is detached from DAO context");
            }
            items = targetDao.queryBuilder()
                    .where(IMMessageDao.Properties.MessageId.eq(__key))
                    .list();
        }
        return items;
    }

    public void setIMMessage(IMMessage iMMessage)
    {
        synchronized (this)
        {
            this.iMMessage = iMMessage;
            messageId = iMMessage == null ? null : iMMessage.getMessageId();
            iMMessage__resolvedKey = messageId;
        }
    }

    /**
     * 更新
     */
    public void updateConversation(IMConversation imConversation)
    {
        myDao.update(imConversation);
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete()
    {
        if (myDao == null)
        {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update()
    {
        if (myDao == null)
        {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh()
    {
        if (myDao == null)
        {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
