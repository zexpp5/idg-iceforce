package com.chaoxiang.entity.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.chaoxiang.entity.chat.IMWorkCircle;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "DDX_IM_CIRCLE".
 */
public class IMWorkCircleDao extends AbstractDao<IMWorkCircle, Long>
{

    public static final String TABLENAME = "DDX_IM_CIRCLE";

    /**
     * Properties of entity IMWorkCircle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties
    {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property From = new Property(2, String.class, "from", false, "FROM");
        public final static Property Btype = new Property(3, String.class, "btype", false, "BTYPE");
        public final static Property Remark = new Property(4, String.class, "remark", false, "REMARK");
        public final static Property CircleId = new Property(5, String.class, "circleId", false, "CIRCLE_ID");
        public final static Property UserId = new Property(6, String.class, "userId", false, "USER_ID");
        public final static Property UserName = new Property(7, String.class, "userName", false, "USER_NAME");
        public final static Property Icon = new Property(8, String.class, "icon", false, "ICON");
        public final static Property Title = new Property(9, String.class, "title", false, "TITLE");
        public final static Property Attachment = new Property(10, String.class, "attachment", false, "ATTACHMENT");
        public final static Property CreateTime = new Property(11, String.class, "createTime", false, "CREATE_TIME");
        public final static Property MessageId = new Property(12, String.class, "messageId", false, "MESSAGE_ID");
        public final static Property UnReadMsg = new Property(13, int.class, "unReadMsg", false, "UN_READ_MSG");
    }

    ;


    public IMWorkCircleDao(DaoConfig config)
    {
        super(config);
    }

    public IMWorkCircleDao(DaoConfig config, DaoSession daoSession)
    {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists)
    {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"DDX_IM_CIRCLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE\" TEXT," + // 1: type
                "\"FROM\" TEXT," + // 2: from
                "\"BTYPE\" TEXT," + // 3: btype
                "\"REMARK\" TEXT," + // 4: remark
                "\"CIRCLE_ID\" TEXT," + // 5: circleId
                "\"USER_ID\" TEXT," + // 6: userId
                "\"USER_NAME\" TEXT," + // 7: userName
                "\"ICON\" TEXT," + // 8: icon
                "\"TITLE\" TEXT," + // 9: title
                "\"ATTACHMENT\" TEXT," + // 10: attachment
                "\"CREATE_TIME\" TEXT," + // 11: createTime
                "\"MESSAGE_ID\" TEXT," + // 12: messageId
                "\"UN_READ_MSG\" INTEGER NOT NULL );"); // 13: unReadMsg
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists)
    {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DDX_IM_CIRCLE\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, IMWorkCircle entity)
    {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null)
        {
            stmt.bindLong(1, id);
        }

        String type = entity.getType();
        if (type != null)
        {
            stmt.bindString(2, type);
        }

        String from = entity.getFrom();
        if (from != null)
        {
            stmt.bindString(3, from);
        }

        String btype = entity.getBtype();
        if (btype != null)
        {
            stmt.bindString(4, btype);
        }

        String remark = entity.getRemark();
        if (remark != null)
        {
            stmt.bindString(5, remark);
        }

        String circleId = entity.getCircleId();
        if (circleId != null)
        {
            stmt.bindString(6, circleId);
        }

        String userId = entity.getUserId();
        if (userId != null)
        {
            stmt.bindString(7, userId);
        }

        String userName = entity.getUserName();
        if (userName != null)
        {
            stmt.bindString(8, userName);
        }

        String icon = entity.getIcon();
        if (icon != null)
        {
            stmt.bindString(9, icon);
        }

        String title = entity.getTitle();
        if (title != null)
        {
            stmt.bindString(10, title);
        }

        String attachment = entity.getAttachment();
        if (attachment != null)
        {
            stmt.bindString(11, attachment);
        }

        String createTime = entity.getCreateTime();
        if (createTime != null)
        {
            stmt.bindString(12, createTime);
        }

        String messageId = entity.getMessageId();
        if (messageId != null)
        {
            stmt.bindString(13, messageId);
        }
        stmt.bindLong(14, entity.getUnReadMsg());
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset)
    {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public IMWorkCircle readEntity(Cursor cursor, int offset)
    {
        IMWorkCircle entity = new IMWorkCircle( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // from
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // btype
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // remark
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // circleId
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userId
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // userName
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // icon
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // title
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // attachment
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // createTime
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // messageId
                cursor.getInt(offset + 13) // unReadMsg
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, IMWorkCircle entity, int offset)
    {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFrom(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBtype(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRemark(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCircleId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIcon(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTitle(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAttachment(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCreateTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMessageId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUnReadMsg(cursor.getInt(offset + 13));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(IMWorkCircle entity, long rowId)
    {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(IMWorkCircle entity)
    {
        if (entity != null)
        {
            return entity.getId();
        } else
        {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable()
    {
        return true;
    }

    // KEEP METHODS - put your custom methods here

    /**
     * 查询对应的ID信息
     *
     * @param
     * @return
     */
    public IMWorkCircle loadWorkCircleforId(String id)
    {
        return queryBuilder().where(Properties.CircleId.eq(id)).unique();
    }

    /**
     * 查询所有的类型
     *
     * @param type   类型 评论还是朋友圈
     * @param unRead 未读已读
     * @return
     */
    public List<IMWorkCircle> loadAllWorkCircleForType(String type, int unRead)
    {
        return queryBuilder()
                .where(Properties.Type.eq(type), Properties.UnReadMsg.eq(unRead))
                .orderAsc(Properties.Id)
                .build()
                .list();
    }

    /**
     * 搜索某个类型的所有的。
     * @param type
     * @return
     */
    public List<IMWorkCircle> loadAllWorkCircleForType(String type)
    {
        return queryBuilder()
                .where(Properties.Type.eq(type), Properties.UnReadMsg.eq(1))
                .orderAsc(Properties.Id)
                .build()
                .list();
    }

    /**
     * @return
     */
    public boolean findWorkCircleStatusList()
    {
        boolean isHas = false;
        List<IMWorkCircle> list = queryBuilder()
                .where(Properties.UnReadMsg.eq(1))
                .build()
                .list();
        if (list != null && list.size() > 0)
            isHas = true;
        else
            isHas = false;
        return isHas;
    }

    /**
     * 更新类型
     *
     * @param type
     */
    public void upDateWorkCircleRead(String type)
    {
        List<IMWorkCircle> list = queryBuilder()
                .where(Properties.Type.eq(type), Properties.UnReadMsg.eq(1))
                .orderAsc(Properties.Id)
                .build()
                .list();

        if (list.size() > 0)
        {
            for (int i = 0; i < list.size(); i++)
            {
                list.get(i).setUnReadMsg(0);
            }
            updateWorkCircleList(list);
        }
    }

    /**
     * 修改列表
     *
     * @param list
     */
    public void updateWorkCircleList(List<IMWorkCircle> list)
    {
//        updateInTx(list);
        insertOrReplaceInTx(list);
    }

    /**
     * 修改单个
     *
     * @param list
     */
    public void updateWorkCircle(IMWorkCircle list)
    {
//        updateInTx(list);
        insertOrReplace(list);
    }
    // KEEP METHODS END

}
